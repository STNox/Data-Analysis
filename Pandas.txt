시리즈 생성

pd.Series([리스트], index=[리스트])
pd.Series(range())
s = pd.Series({딕셔너리}, index=[리스트](순서 배정))

-------------------------------------------------------------

시리즈 접근

.index (인덱스 값)
.values (값)

--------------------------------------------------------------

시리즈에 이름 붙이기

.name = 'str' (시리즈 이름)
.index.name = 'str' (인덱스 이름)

--------------------------------------------------------------

시리즈 인덱싱

s[1], s['인덱스 라벨'], s[[리스트]] (각각 인덱싱)
s[(조건식) 조건 연산자 (조건식)]
s[1:3] (s[3] 미포함)
s['인덱스 라벨1':'인덱스 라벨2'] (s['인덱스 라벨2'] 포함)

s.x (인덱스 라벨이 영문 문자열일 경우)

---------------------------------------------------------------

인덱스 기반 연산

ds = s - s1
s.values - s1.values

ds.notnull() (boolean으로 출력)
ds[ds.notnull()] (NaN이 아닌 값 출력)

---------------------------------------------------------------

데이터의 갱신, 추가, 삭제

s[1] = 1.5 (s[1]이 존재했다면 update, 존재하지 않았다면 add)
del s[1]

--------------------------------------------------------------------

데이터프레임 생성

data = {딕셔너리}
columns = [리스트]
index = [리스트]
pd.DataFrame(data, index=index, columns=columns)
pd.DataFrame(np.arange().reshape(), index=[리스트], columns=[리스트])

pd.read_csv('파일 경로')
pd.read_csv('URL')

--------------------------------------------------------------------

데이터프레임 접근

.values (데이터 값)
.columns (열 인덱스)
.index (행 인덱스)

-----------------------------------------------------------------

인덱스 이름 붙이기

.index.name = 'str'
.columns.name = 'str'

------------------------------------------------------------------

데이터프레임 전치(transpose)

df.T (행과 열 바꾸기)

------------------------------------------------------------------

열 데이터의 갱신, 추가, 삭제

df['열 인덱스 값'] = 값
del df['열 인덱스 값']

------------------------------------------------------------------

열 인덱싱

df['열 인덱스 값'] (시리즈 반환)
df[[리스트(열 인덱스 값들)]] (부분적인 데이터프레임 반환)
df[['열 인덱스 값']] (하나의 열을 데이터프레임 형태로 반환)

------------------------------------------------------------------

행 인덱싱

df[:1] (일반적인 슬라이싱 범위와 동일)
df['인덱스 값1':'인덱스 값2'] ('인덱스 값2' 포함)

-------------------------------------------------------------------

개별 데이터 인덱싱

df['열 인덱스 값']['행 인덱스 값'] ('행 X 열'에 해당하는 값 반환)

-------------------------------------------------------------------

데이터프레임 고급 인덱싱

loc 인덱서

df.loc[행 인덱스 값]
df.loc[행 인덱스 값, '열 인덱스 값']
df.loc['행 인덱스 값', '열 인덱스 값']


df.loc['행 인덱스 값'] (행을 시리즈로 출력)
df.loc['행 인덱스 값1':'행 인덱스 값2'] (범위 내 행 출력)
df.loc[['행 인덱스 값1':'행 인덱스 값2']]

df.loc[df.A > 15] ( A열의 값이 15보다 큰 행만 출력)

def select_rows(df):
	return df.A > 15
df.loc[select_rows(df)] (인덱스 값을 반환하는 함수를 사용)

df.loc[1:2] (행 인덱스 값이 정수인 경우, 1부터 2포함)


df.loc['행 인덱스 값', '열 인덱스 값']

df.loc['행 인덱스 값':, '열 인덱스 값'] (슬라이싱 활용, 시리즈 출력)
df.loc['행 인덱스 값', :] (해당 행의 모든 열을 시리즈로 출력)

df.loc[[리스트(행 인덱스 값)], [리스트(열 인덱스 값]] (각각의 행과 열 출력)

df.loc[df.A > 10, [리스트(열 인덱스 값)]] (조건식을 만족하는 행과 각 열 출력)

-----------------------------------------------------------------------------

iloc 인덱서

정수 인덱스만 받는다.
df.iloc[0, 1]
df.iloc[:2, 2] (일반적 슬라이싱과 범위 동일, 시리즈로 출력)
df.iloc[2:3, 1:3]

df.iloc[-1] (마지막 행 시리즈로 출력)